
System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(((0)<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 50),_k1 + 1 < 50)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 50),_k1 + 1 < 50)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(((0)<(70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 70),_k1 + 1 < 70)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 70),_k1 + 1 < 70)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 120))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 120))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(120))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(((0)<(120))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 120),_k1 + 1 < 120)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 120),_k1 + 1 < 120)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(_n1 < 50,x8(_n1) + 1,If(_n1 < 70,x8(_n1) + 2,If(_n1 < 120,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            x8(_n1) - 3 >= x8(_n1) - 3)))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        (-3 + x8(Var(0)) >=
                                        -3 + x8(Var(0)))),
                                        rewrite((-3 +
                                        x8(Var(0)) >=
                                        -3 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      x8(_n1) - 3 >=
                                      x8(_n1) - 3))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         x8(_n1) - 3 >= x8(_n1) - 3))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV1
 Closed Form Solution
_CV1 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 + 2*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 2,x8(0)=_CV2
 Closed Form Solution
_CV2 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV4

Closed form solution return by sympy 
_CV4 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV4
 Closed Form Solution
_CV4 + _n1

Equation Pass to sympy
T(n+1)-(T(n) - 3)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 - 3*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) - 3,x8(0)=_CV3
 Closed Form Solution
_CV3 - 3*_n1

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 50, _f = [else -> Var(0)]]


System try to prove 
((0)<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))
	_s.add(Not(((0)<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 120,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 120,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               Not(_n1 >= 50),
                               _C + -1*_n1 <= 0,
                               Not(Or(_n1 >= 120,
                                      Not(_n1 >= 70),
                                      Not(_n1 >= 50)))))),
                 Or(Not(50 >= 0),
                    Not(50 >= 50),
                    _C + -1*50 <= 0,
                    Not(Or(50 >= 120,
                           Not(50 >= 70),
                           Not(50 >= 50)))))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((50 >=
                                        0) ==
                                        True),
                                        Not(50 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite((50 >=
                                        50) ==
                                        True),
                                        Not(50 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 50) ==
                                        False),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        50 ==
                                        -50),
                                        _C + -1*50 ==
                                        _C + -50),
                                        rewrite(_C + -50 ==
                                        -50 + _C),
                                        _C + -1*50 ==
                                        -50 + _C),
                                        (_C + -1*50 <= 0) ==
                                        (-50 + _C <= 0)),
                                        rewrite((-50 + _C <=
                                        0) ==
                                        (_C <= 50)),
                                        (_C + -1*50 <= 0) ==
                                        (_C <= 50)),
                                        trans(monotonicity(trans(monotonicity(rewrite((50 >=
                                        120) ==
                                        False),
                                        trans(monotonicity(rewrite((50 >=
                                        70) ==
                                        False),
                                        Not(50 >= 70) ==
                                        Not(False)),
                                        rewrite(Not(False) ==
                                        True),
                                        Not(50 >= 70) ==
                                        True),
                                        trans(monotonicity(rewrite((50 >=
                                        50) ==
                                        True),
                                        Not(50 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 50) ==
                                        False),
                                        Or(50 >= 120,
                                        Not(50 >= 70),
                                        Not(50 >= 50)) ==
                                        Or(False,
                                        True,
                                        False)),
                                        rewrite(Or(False,
                                        True,
                                        False) ==
                                        True),
                                        Or(50 >= 120,
                                        Not(50 >= 70),
                                        Not(50 >= 50)) ==
                                        True),
                                        Not(Or(50 >= 120,
                                        Not(50 >= 70),
                                        Not(50 >= 50))) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(Or(50 >= 120,
                                        Not(50 >= 70),
                                        Not(50 >= 50))) ==
                                        False),
                                        Or(Not(50 >= 0),
                                        Not(50 >= 50),
                                        _C + -1*50 <= 0,
                                        Not(Or(50 >= 120,
                                        Not(50 >= 70),
                                        Not(50 >= 50)))) ==
                                        Or(False,
                                        False,
                                        _C <= 50,
                                        False)),
                            rewrite(Or(False,
                                       False,
                                       _C <= 50,
                                       False) ==
                                    (_C <= 50)),
                            Or(Not(50 >= 0),
                               Not(50 >= 50),
                               _C + -1*50 <= 0,
                               Not(Or(50 >= 120,
                                      Not(50 >= 70),
                                      Not(50 >= 50)))) ==
                            (_C <= 50)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(_n1 >= 50),
                                       _C + -1*_n1 <= 0,
                                       Not(Or(_n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                         Or(Not(50 >= 0),
                            Not(50 >= 50),
                            _C + -1*50 <= 0,
                            Not(Or(50 >= 120,
                                   Not(50 >= 70),
                                   Not(50 >= 50))))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(_n1 >= 50),
                                       _C + -1*_n1 <= 0,
                                       Not(Or(_n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                         _C <= 50)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  Not(_n1 >= 50),
                                  _C + -1*_n1 <= 0,
                                  Not(Or(_n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                    _C <= 50) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  Not(_n1 >= 50),
                                  _C + -1*_n1 <= 0,
                                  Not(Or(_n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                    _C <= 50)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(_n1 >= 50),
                          _C + -1*_n1 <= 0,
                          Not(Or(_n1 >= 120,
                                 Not(_n1 >= 70),
                                 Not(_n1 >= 50)))))),
            Or(Not(50 >= 0),
               Not(50 >= 50),
               _C + -1*50 <= 0,
               Not(Or(50 >= 120,
                      Not(50 >= 70),
                      Not(50 >= 50))))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(_n1 >= 50),
                          _C + -1*_n1 <= 0,
                          Not(Or(_n1 >= 120,
                                 Not(_n1 >= 70),
                                 Not(_n1 >= 50)))))),
            _C <= 50)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(_n1 >= 50),
                    _C + -1*_n1 <= 0,
                    Not(Or(_n1 >= 120,
                           Not(_n1 >= 70),
                           Not(_n1 >= 50)))))),
      _C <= 50)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >=
                                        50,
                                        _n1 < _C),
                                        And(_n1 < 120,
                                        And(Not(_n1 < 70),
                                        Not(_n1 < 50))))))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 50,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                        trans(monotonicity(rewrite((Var(0) <
                                        120) ==
                                        Not(120 <= Var(0))),
                                        monotonicity(trans(monotonicity(rewrite((Var(0) <
                                        70) ==
                                        Not(70 <= Var(0))),
                                        Not(Var(0) < 70) ==
                                        Not(Not(70 <= Var(0)))),
                                        rewrite(Not(Not(70 <=
                                        Var(0))) ==
                                        (70 <= Var(0))),
                                        Not(Var(0) < 70) ==
                                        (70 <= Var(0))),
                                        trans(monotonicity(rewrite((Var(0) <
                                        50) ==
                                        Not(50 <= Var(0))),
                                        Not(Var(0) < 50) ==
                                        Not(Not(50 <= Var(0)))),
                                        rewrite(Not(Not(50 <=
                                        Var(0))) ==
                                        (50 <= Var(0))),
                                        Not(Var(0) < 50) ==
                                        (50 <= Var(0))),
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)) ==
                                        And(70 <= Var(0),
                                        50 <= Var(0))),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))) ==
                                        And(Not(120 <=
                                        Var(0)),
                                        And(70 <= Var(0),
                                        50 <= Var(0)))),
                                        rewrite(And(Not(120 <=
                                        Var(0)),
                                        And(70 <= Var(0),
                                        50 <= Var(0))) ==
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))) ==
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))),
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)))) ==
                                        Implies(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        rewrite(Implies(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)))) ==
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 120,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))))) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                     And(Not(120 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >=
                                        50,
                                        _n1 < _C),
                                        And(_n1 < 120,
                                        And(Not(_n1 < 70),
                                        Not(_n1 < 50))))))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 50,
                                        Not(_C <= _n1))),
                                       And(Not(120 <= _n1),
                                        70 <= _n1,
                                        50 <= _n1))))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 50, Not(_C <= _n1))),
                          And(Not(120 <= _n1),
                              70 <= _n1,
                              50 <= _n1)))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 50,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 50,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 50,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      monotonicity(monotonicity(rewrite((120 <=
                                        Var(0)) ==
                                        (Var(0) >= 120)),
                                        Not(120 <= Var(0)) ==
                                        Not(Var(0) >= 120)),
                                        rewrite((70 <=
                                        Var(0)) ==
                                        (Var(0) >= 70)),
                                        rewrite((50 <=
                                        Var(0)) ==
                                        (Var(0) >= 50)),
                                        And(Not(120 <=
                                        Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)) ==
..., unit-resolution(th-lemma(Or(Not(_C <= 50), _C <= 70)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 120,
                                        Not(70 >= 70),
                                        Not(70 >= 50)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((70 >=
                                        0) ==
                                        True),
                                        Not(70 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        70 ==
                                        -70),
                                        _C + -1*70 ==
                                        _C + -70),
                                        rewrite(_C + -70 ==
                                        -70 + _C),
                                        _C + -1*70 ==
                                        -70 + _C),
                                        (_C + -1*70 <= 0) ==
                                        (-70 + _C <= 0)),
                                        rewrite((-70 + _C <=
                                        0) ==
                                        (_C <= 70)),
                                        (_C + -1*70 <= 0) ==
                                        (_C <= 70)),
                                        Not(_C + -1*70 <= 0) ==
                                        Not(_C <= 70)),
                                        rewrite((70 >= 120) ==
                                        False),
                                        trans(monotonicity(rewrite((70 >=
                                        70) ==
                                        True),
                                        Not(70 >= 70) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 70) ==
                                        False),
                                        trans(monotonicity(rewrite((70 >=
                                        50) ==
                                        True),
                                        Not(70 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 50) ==
                                        False),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 120,
                                        Not(70 >= 70),
                                        Not(70 >= 50)) ==
                                        Or(False,
                                        Not(_C <= 70),
                                        False,
                                        False,
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 70),
                                        False,
                                        False,
                                        False) ==
                                        Not(_C <= 70)),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 120,
                                        Not(70 >= 70),
                                        Not(70 >= 50)) ==
                                        Not(_C <= 70)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 120,
                                        Not(70 >= 70),
                                        Not(70 >= 50))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 120,
                                        Not(70 >= 70),
                                        Not(70 >= 50))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 120,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                      Not(_C <= 70))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        Or(_n1 >= 120,
                                        Or(Not(_n1 >= 70),
                                        Not(_n1 >= 50))))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Or(Var(0) >=
                                        120,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 120,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))) ==
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Or(Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 120,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))) ==
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 120,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Var(0) >= 120,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 120,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 120,And(Not(_n1 < 70),Not(_n1 < 50))))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 120,And(Not(_n1 < 70),Not(_n1 < 50))))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 51, _n1!0 = 50, _f = [else -> Var(0)]]


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 70,Not(_n1 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 70,Not(_n1 >= 50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 70, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(70)),Not(((50)<(50))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 70,Not(_n1 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 70,Not(_n1 >= 50))))))
	_s.add(Not(And(((50)<(70)),Not(((50)<(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, Not(False)))), trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                      And(True, Not(False)) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True, Not(False)) == True),
                   Not(And(True, Not(False))) == Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, Not(False))) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(70 <= _n1,_n1 < _C),And(_n1 < 120,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 120,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 120, _f = [else -> Var(0)]]


System try to prove 
And(((70)<(120)),And(Not(((70)<(70))),Not(((70)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(70 <= _n1,_n1 < _C),And(_n1 < 120,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 120,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))
	_s.add(Not(And(((70)<(120)),And(Not(((70)<(70))),Not(((70)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, And(Not(False), Not(False))))), trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                        rewrite(Not(False) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        And(True, True)),
                                        rewrite(And(True,
                                        True) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        True),
                                      And(True,
                                        And(Not(False),
                                        Not(False))) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True,
                             And(Not(False), Not(False))) ==
                         True),
                   Not(And(True,
                           And(Not(False), Not(False)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, And(Not(False), Not(False)))) == False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 90

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 90))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 90)),
      trans(monotonicity(rewrite((x8(0) < 90) ==
                                 Not(90 <= x8(0))),
                         Not(x8(0) < 90) ==
                         Not(Not(90 <= x8(0)))),
            rewrite(Not(Not(90 <= x8(0))) == (90 <= x8(0))),
            Not(x8(0) < 90) == (90 <= x8(0))),
      90 <= x8(0)),
   rewrite((90 <= x8(0)) == (x8(0) >= 90)),
   x8(0) >= 90), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 90) == (0 >= 90)),
      rewrite((0 >= 90) == False),
      (x8(0) >= 90) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 50

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 50))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 50)),
      trans(monotonicity(rewrite((x8(0) < 50) ==
                                 Not(50 <= x8(0))),
                         Not(x8(0) < 50) ==
                         Not(Not(50 <= x8(0)))),
            rewrite(Not(Not(50 <= x8(0))) == (50 <= x8(0))),
            Not(x8(0) < 50) == (50 <= x8(0))),
      50 <= x8(0)),
   rewrite((50 <= x8(0)) == (x8(0) >= 50)),
   x8(0) >= 50), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 50) == (0 >= 50)),
      rewrite((0 >= 50) == False),
      (x8(0) >= 50) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 70

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 70))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 70)),
      trans(monotonicity(rewrite((x8(0) < 70) ==
                                 Not(70 <= x8(0))),
                         Not(x8(0) < 70) ==
                         Not(Not(70 <= x8(0)))),
            rewrite(Not(Not(70 <= x8(0))) == (70 <= x8(0))),
            Not(x8(0) < 70) == (70 <= x8(0))),
      70 <= x8(0)),
   rewrite((70 <= x8(0)) == (x8(0) >= 70)),
   x8(0) >= 70), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 70) == (0 >= 70)),
      rewrite((0 >= 70) == False),
      (x8(0) >= 70) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 90,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        90) ==
                                        Not(90 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(90 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(90 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 90,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            x8(_n1) - 3 >= x8(_n1) - 3)))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        (-3 + x8(Var(0)) >=
                                        -3 + x8(Var(0)))),
                                        rewrite((-3 +
                                        x8(Var(0)) >=
                                        -3 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      x8(_n1) - 3 >=
                                      x8(_n1) - 3))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         x8(_n1) - 3 >= x8(_n1) - 3))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 50,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        50) ==
                                        Not(50 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(50 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(50 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 50,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 70,
                                    x8(_n1) + 2 >=
                                    x8(_n1) + 2))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        70) ==
                                        Not(70 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        (2 + x8(Var(0)) >=
                                        2 + x8(Var(0)))),
                                        rewrite((2 +
                                        x8(Var(0)) >=
                                        2 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        Implies(Not(70 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(70 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 70,
                                 x8(_n1) + 2 >= x8(_n1) + 2)))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV1
 Closed Form Solution
_CV1 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV3
 Closed Form Solution
_CV3 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV4

Closed form solution return by sympy 
_CV4 + 2*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 2,x8(0)=_CV4
 Closed Form Solution
_CV4 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) - 3)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 - 3*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) - 3,x8(0)=_CV2
 Closed Form Solution
_CV2 - 3*_n1

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 50, _f = [else -> Var(0)]]


System try to prove 
((((0)+(0)))<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))
	_s.add(Not(((((0)+(0)))<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))
	_s.add(Not(And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 10, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(70)),Not(((50)<(50))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))
	_s.add(Not(And(((50)<(70)),Not(((50)<(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, Not(False)))), trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                      And(True, Not(False)) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True, Not(False)) == True),
                   Not(And(True, Not(False))) == Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, Not(False))) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 20, _f = [else -> Var(0)]]


System try to prove 
And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))
	_s.add(Not(And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, And(Not(False), Not(False))))), trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                        rewrite(Not(False) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        And(True, True)),
                                        rewrite(And(True,
                                        True) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        True),
                                      And(True,
                                        And(Not(False),
                                        Not(False))) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True,
                             And(Not(False), Not(False))) ==
                         True),
                   Not(And(True,
                           And(Not(False), Not(False)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, And(Not(False), Not(False)))) == False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=A

Closed form solution return by sympy 
A + n

Original Axoims 
X(_n1 + 1)=X(_n1) + 1,X(0)=A
 Closed Form Solution
A + _n1

Equation Pass to sympy
T(n+1)-(A + n + T(n))=0------Base Case--T(0)=B

Closed form solution return by sympy 
A*n + B + n**2/2 - n/2

Original Axoims 
Y(_n1 + 1)=A + _n1 + Y(_n1),Y(0)=B
 Closed Form Solution
(2*A*_n1 + 2*B - _n1 + power(_n1, 2))/2

System try to prove 
C > 0

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	A=Int('A')
	X=Function('X',IntSort(),IntSort())
	B=Int('B')
	_n1=Int('_n1')
	C=Int('C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == A)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(B > 0,X(_n1) + 1,If(C > 0,X(_n1) + 2,X(_n1))))))
	_s.add(Not(C > 0))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
C > 0

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	A=Int('A')
	X=Function('X',IntSort(),IntSort())
	B=Int('B')
	_n1=Int('_n1')
	C=Int('C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == A)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(B > 0,X(_n1) + 1,If(C > 0,X(_n1) + 2,X(_n1))))))
	_s.add(Not(C > 0))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
B > 0

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	A=Int('A')
	X=Function('X',IntSort(),IntSort())
	B=Int('B')
	_n1=Int('_n1')
	C=Int('C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == A)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(B > 0,X(_n1) + 1,If(C > 0,X(_n1) + 2,X(_n1))))))
	_s.add(Not(B > 0))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
B > 0

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	A=Int('A')
	X=Function('X',IntSort(),IntSort())
	B=Int('B')
	_n1=Int('_n1')
	C=Int('C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == A)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(B > 0,X(_n1) + 1,If(C > 0,X(_n1) + 2,X(_n1))))))
	_s.add(Not(B > 0))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,X(_n1) >= X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	A=Int('A')
	X=Function('X',IntSort(),IntSort())
	B=Int('B')
	_n1=Int('_n1')
	C=Int('C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == A)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(B > 0,X(_n1) + 1,If(C > 0,X(_n1) + 2,X(_n1))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,X(_n1) >= X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0, X(_n1) >= X(_n1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(rewrite((X(Var(0)) >=
                                        X(Var(0))) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        X(Var(0)) >=
                                        X(Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        X(Var(0)) >=
                                        X(Var(0))) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        X(_n1) >= X(_n1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        X(_n1) >= X(_n1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      X(_n1) >= X(_n1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1, Implies(_n1 >= 0, X(_n1) >= X(_n1)))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 + 2*n

Original Axoims 
X(_n1 + 1)=X(_n1) + 2,X(0)=_CV2
 Closed Form Solution
_CV2 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 + n

Original Axoims 
X(_n1 + 1)=X(_n1) + 1,X(0)=_CV3
 Closed Form Solution
_CV3 + _n1

Equation Pass to sympy
T(n+1)-(T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1

Original Axoims 
X(_n1 + 1)=X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1

System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,((_n1)==((1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
(((0))==((1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not((((0))==((1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) >= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(((_n1)==(1)),1,_n1*X(_n1) + X(_n1)))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1*X(_n1) + X(_n1) <= _n1*X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


Equation Pass to sympy
T(n+1)-((n + 1)*T(n))=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1*factorial(n)

Original Axoims 
X(_n1 + 1)=(_n1 + 1)*X(_n1),X(0)=_CV1
 Closed Form Solution
_CV1*factorial(_n1)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,(_n1!=(1))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               _C + -1*_n1 <= 0,
                               _n1 == 1))),
                 Or(Not(1 + -1*1 >= 0),
                    _C + -1*(1 + -1*1) <= 0,
                    1 + -1*1 == 1))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 >= 0) ==
                                        (0 >= 0)),
                                        rewrite((0 >= 0) ==
                                        True),
                                        (1 + -1*1 >= 0) ==
                                        True),
                                        Not(1 + -1*1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 + -1*1 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        -1*(1 + -1*1) ==
                                        -1*0),
                                        rewrite(-1*0 == 0),
                                        -1*(1 + -1*1) == 0),
                                        _C + -1*(1 + -1*1) ==
                                        _C + 0),
                                        rewrite(_C + 0 == _C),
                                        _C + -1*(1 + -1*1) ==
                                        _C),
                                        (_C + -1*(1 + -1*1) <=
                                        0) ==
                                        (_C <= 0)),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        1 + -1*1 == 1 + -1),
                                        rewrite(1 + -1 == 0),
                                        1 + -1*1 == 0),
                                        (1 + -1*1 == 1) ==
                                        (0 == 1)),
                                        rewrite((0 == 1) ==
                                        False),
                                        (1 + -1*1 == 1) ==
                                        False),
                                        Or(Not(1 + -1*1 >= 0),
                                        _C + -1*(1 + -1*1) <=
                                        0,
                                        1 + -1*1 == 1) ==
                                        Or(False,
                                        _C <= 0,
                                        False)),
                            rewrite(Or(False,
                                       _C <= 0,
                                       False) ==
                                    (_C <= 0)),
                            Or(Not(1 + -1*1 >= 0),
                               _C + -1*(1 + -1*1) <= 0,
                               1 + -1*1 == 1) ==
                            (_C <= 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         Or(Not(1 + -1*1 >= 0),
                            _C + -1*(1 + -1*1) <= 0,
                            1 + -1*1 == 1)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       _C + -1*_n1 <= 0,
                                       _n1 == 1))),
                         _C <= 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  _C + -1*_n1 <= 0,
                                  _n1 == 1))),
                    _C <= 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            Or(Not(1 + -1*1 >= 0),
               _C + -1*(1 + -1*1) <= 0,
               1 + -1*1 == 1)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          _C + -1*_n1 <= 0,
                          _n1 == 1))),
            _C <= 0)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    _C + -1*_n1 <= 0,
                    _n1 == 1))),
      _C <= 0)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0))),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1)),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        0,
                                        Var(0) < _C),
                                        Var(0) == 1)) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                     Var(0) == 1)),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >= 0,
                                        _n1 < _C),
                                        _n1 == 1)))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                       _n1 == 1)))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 0, Not(_C <= _n1))),
                          _n1 == 1))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 0,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C <= Var(0)))),
                                        Var(0) == 1) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1)),
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C <= _n1))),
                                    _n1 == 1))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    Not(And(_n1 >= 0,
                                        Not(_C + -1*_n1 <= 0))),
                                    _n1 == 1)))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       Not(And(_n1 >= 0,
                               Not(_C + -1*_n1 <= 0))),
                       _n1 == 1))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1),
                         Or(Not(Var(0) >= 0),
                            Not(And(Var(0) >= 0,
                                    Not(_C + -1*Var(0) <= 0))),
                            Var(0) == 1))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              Not(And(_n1 >= 0,
                                      Not(_C + -1*_n1 <= 0))),
                              _n1 == 1)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(And(_n1 >= 0, Not(_C + -1*_n1 <= 0))),
                    _n1 == 1))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(0) >=
                                        0,
                                        Not(_C + -1*Var(0) <=
                                        0)) ==
                                        Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0)))),
                                        rewrite(Not(Not(Or(Not(Var(0) >=
                                        0),
                                        _C + -1*Var(0) <= 0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))) ==
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0)),
                                     Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 0,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Var(0) == 1) ==
                                     Or(Not(Var(0) >= 0),
                                        Or(Not(Var(0) >= 0),
                                        _C + -1*Var(0) <= 0),
                                        Var(0) == 1)),
                        rewrite(Or(Not(Var(0) >= 0),
                                   Or(Not(Var(0) >= 0),
                                      _C + -1*Var(0) <= 0),
                                   Var(0) == 1) ==
                                Or(Not(Var(0) >= 0),
                                   _C + -1*Var(0) <= 0,
                                   Var(0) == 1)),
                        Or(Not(Var(0) >= 0),
                           Not(And(Var(0) >= 0,
                                   Not(_C + -1*Var(0) <= 0))),
                           Var(0) == 1) ==
                        Or(Not(Var(0) >= 0),
                           _C + -1*Var(0) <= 0,
                           Var(0) == 1)),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             Not(And(_n1 >= 0,
                                     Not(_C + -1*_n1 <= 0))),
                             _n1 == 1))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             _C + -1*_n1 <= 0,
                             _n1 == 1)))),
      ForAll(_n1,
             Or(Not(_n1 >= 0), _C + -1*_n1 <= 0, _n1 == 1))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       _C + -1*Var(0) <= 0,
..., unit-resolution(th-lemma(Or(Not(_C <= 0), _C <= 1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _C + -1*1 == _C + -1),
                                        rewrite(_C + -1 ==
                                        -1 + _C),
                                        _C + -1*1 == -1 + _C),
                                        (_C + -1*1 <= 0) ==
                                        (-1 + _C <= 0)),
                                        rewrite((-1 + _C <=
                                        0) ==
                                        (_C <= 1)),
                                        (_C + -1*1 <= 0) ==
                                        (_C <= 1)),
                                        Not(_C + -1*1 <= 0) ==
                                        Not(_C <= 1)),
                                        trans(monotonicity(rewrite((1 ==
                                        1) ==
                                        True),
                                        Not(1 == 1) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 == 1) == False),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Or(False,
                                        Not(_C <= 1),
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 1),
                                        False) ==
                                        Not(_C <= 1)),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1)) ==
                                        Not(_C <= 1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Or(Not(1 >= 0),
                                        Not(_C + -1*1 <= 0),
                                        Not(1 == 1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                        Not(_C <= 1))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                      Not(_C <= 1))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Var(0) !=
                                        1 ==
                                        Not(Var(0) == 1)),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Implies(_C <= Var(0),
                                        Not(Var(0) == 1))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(_C <= Var(0),
                                        Var(0) != 1) ==
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Not(Var(0) == 1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Var(0) != 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        _n1 != 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))),
                                        quant-intro(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C <= _n1),
                                        Not(_n1 == 1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                       nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)),
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)))),
                                        ~(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))),
                                        ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1))))),
                                       ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        Not(_n1 == 1)))),
                                   quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C + -1*Var(0) <=
                                        0),
                                        Not(Var(0) == 1))),
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),((_n1)==(1)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 3, _n1!0 = 2, _f = [else -> Var(0)]]


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(((0)<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 50),_k1 + 1 < 50)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 50),_k1 + 1 < 50)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(((0)<(70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 70),_k1 + 1 < 70)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 70),_k1 + 1 < 70)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,_n1 < 90))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,_n1 < 90))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
((0)<(90))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(((0)<(90))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,_k1 < 90),_k1 + 1 < 90)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(Implies(And(_k1 >= 0,_k1 < 90),_k1 + 1 < 90)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,X(_n1) >= X(_n1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	X=Function('X',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(X(0) == 1)
	_s.add(ForAll([_n1],Implies(_n1>=0,X(_n1 + 1) == If(_n1 < 50,X(_n1) + 1,If(_n1 < 70,X(_n1) + 2,If(_n1 < 90,X(_n1) + 3,X(_n1)))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,X(_n1) >= X(_n1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0, X(_n1) >= X(_n1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(rewrite((X(Var(0)) >=
                                        X(Var(0))) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        X(Var(0)) >=
                                        X(Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        X(Var(0)) >=
                                        X(Var(0))) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        X(_n1) >= X(_n1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        X(_n1) >= X(_n1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      X(_n1) >= X(_n1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1, Implies(_n1 >= 0, X(_n1) >= X(_n1)))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1 + n

Original Axoims 
X(_n1 + 1)=X(_n1) + 1,X(0)=_CV1
 Closed Form Solution
_CV1 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 + 2*n

Original Axoims 
X(_n1 + 1)=X(_n1) + 2,X(0)=_CV2
 Closed Form Solution
_CV2 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) + 3)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 + 3*n

Original Axoims 
X(_n1 + 1)=X(_n1) + 3,X(0)=_CV3
 Closed Form Solution
_CV3 + 3*_n1

Equation Pass to sympy
T(n+1)-(T(n))=0------Base Case--T(0)=_CV4

Closed form solution return by sympy 
_CV4

Original Axoims 
X(_n1 + 1)=X(_n1),X(0)=_CV4
 Closed Form Solution
_CV4

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 50, _f = [else -> Var(0)]]


System try to prove 
((0)<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))
	_s.add(Not(((0)<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 90,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 90,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               Not(_n1 >= 50),
                               _C + -1*_n1 <= 0,
                               Not(Or(_n1 >= 90,
                                      Not(_n1 >= 70),
                                      Not(_n1 >= 50)))))),
                 Or(Not(50 >= 0),
                    Not(50 >= 50),
                    _C + -1*50 <= 0,
                    Not(Or(50 >= 90,
                           Not(50 >= 70),
                           Not(50 >= 50)))))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((50 >=
                                        0) ==
                                        True),
                                        Not(50 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite((50 >=
                                        50) ==
                                        True),
                                        Not(50 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 50) ==
                                        False),
                                        trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        50 ==
                                        -50),
                                        _C + -1*50 ==
                                        _C + -50),
                                        rewrite(_C + -50 ==
                                        -50 + _C),
                                        _C + -1*50 ==
                                        -50 + _C),
                                        (_C + -1*50 <= 0) ==
                                        (-50 + _C <= 0)),
                                        rewrite((-50 + _C <=
                                        0) ==
                                        (_C <= 50)),
                                        (_C + -1*50 <= 0) ==
                                        (_C <= 50)),
                                        trans(monotonicity(trans(monotonicity(rewrite((50 >=
                                        90) ==
                                        False),
                                        trans(monotonicity(rewrite((50 >=
                                        70) ==
                                        False),
                                        Not(50 >= 70) ==
                                        Not(False)),
                                        rewrite(Not(False) ==
                                        True),
                                        Not(50 >= 70) ==
                                        True),
                                        trans(monotonicity(rewrite((50 >=
                                        50) ==
                                        True),
                                        Not(50 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(50 >= 50) ==
                                        False),
                                        Or(50 >= 90,
                                        Not(50 >= 70),
                                        Not(50 >= 50)) ==
                                        Or(False,
                                        True,
                                        False)),
                                        rewrite(Or(False,
                                        True,
                                        False) ==
                                        True),
                                        Or(50 >= 90,
                                        Not(50 >= 70),
                                        Not(50 >= 50)) ==
                                        True),
                                        Not(Or(50 >= 90,
                                        Not(50 >= 70),
                                        Not(50 >= 50))) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(Or(50 >= 90,
                                        Not(50 >= 70),
                                        Not(50 >= 50))) ==
                                        False),
                                        Or(Not(50 >= 0),
                                        Not(50 >= 50),
                                        _C + -1*50 <= 0,
                                        Not(Or(50 >= 90,
                                        Not(50 >= 70),
                                        Not(50 >= 50)))) ==
                                        Or(False,
                                        False,
                                        _C <= 50,
                                        False)),
                            rewrite(Or(False,
                                       False,
                                       _C <= 50,
                                       False) ==
                                    (_C <= 50)),
                            Or(Not(50 >= 0),
                               Not(50 >= 50),
                               _C + -1*50 <= 0,
                               Not(Or(50 >= 90,
                                      Not(50 >= 70),
                                      Not(50 >= 50)))) ==
                            (_C <= 50)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(_n1 >= 50),
                                       _C + -1*_n1 <= 0,
                                       Not(Or(_n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                         Or(Not(50 >= 0),
                            Not(50 >= 50),
                            _C + -1*50 <= 0,
                            Not(Or(50 >= 90,
                                   Not(50 >= 70),
                                   Not(50 >= 50))))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(_n1 >= 50),
                                       _C + -1*_n1 <= 0,
                                       Not(Or(_n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                         _C <= 50)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  Not(_n1 >= 50),
                                  _C + -1*_n1 <= 0,
                                  Not(Or(_n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                    _C <= 50) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  Not(_n1 >= 50),
                                  _C + -1*_n1 <= 0,
                                  Not(Or(_n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))))),
                    _C <= 50)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(_n1 >= 50),
                          _C + -1*_n1 <= 0,
                          Not(Or(_n1 >= 90,
                                 Not(_n1 >= 70),
                                 Not(_n1 >= 50)))))),
            Or(Not(50 >= 0),
               Not(50 >= 50),
               _C + -1*50 <= 0,
               Not(Or(50 >= 90,
                      Not(50 >= 70),
                      Not(50 >= 50))))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(_n1 >= 50),
                          _C + -1*_n1 <= 0,
                          Not(Or(_n1 >= 90,
                                 Not(_n1 >= 70),
                                 Not(_n1 >= 50)))))),
            _C <= 50)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    Not(_n1 >= 50),
                    _C + -1*_n1 <= 0,
                    Not(Or(_n1 >= 90,
                           Not(_n1 >= 70),
                           Not(_n1 >= 50)))))),
      _C <= 50)), mp(mp(mp~(mp(mp(asserted(ForAll(_n1,
                                Implies(_n1 >= 0,
                                        Implies(And(_n1 >=
                                        50,
                                        _n1 < _C),
                                        And(_n1 < 90,
                                        And(Not(_n1 < 70),
                                        Not(_n1 < 50))))))),
                quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _C) ==
                                        Not(_C <= Var(0))),
                                        And(Var(0) >= 50,
                                        Var(0) < _C) ==
                                        And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                        trans(monotonicity(rewrite((Var(0) <
                                        90) ==
                                        Not(90 <= Var(0))),
                                        monotonicity(trans(monotonicity(rewrite((Var(0) <
                                        70) ==
                                        Not(70 <= Var(0))),
                                        Not(Var(0) < 70) ==
                                        Not(Not(70 <= Var(0)))),
                                        rewrite(Not(Not(70 <=
                                        Var(0))) ==
                                        (70 <= Var(0))),
                                        Not(Var(0) < 70) ==
                                        (70 <= Var(0))),
                                        trans(monotonicity(rewrite((Var(0) <
                                        50) ==
                                        Not(50 <= Var(0))),
                                        Not(Var(0) < 50) ==
                                        Not(Not(50 <= Var(0)))),
                                        rewrite(Not(Not(50 <=
                                        Var(0))) ==
                                        (50 <= Var(0))),
                                        Not(Var(0) < 50) ==
                                        (50 <= Var(0))),
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)) ==
                                        And(70 <= Var(0),
                                        50 <= Var(0))),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))) ==
                                        And(Not(90 <= Var(0)),
                                        And(70 <= Var(0),
                                        50 <= Var(0)))),
                                        rewrite(And(Not(90 <=
                                        Var(0)),
                                        And(70 <= Var(0),
                                        50 <= Var(0))) ==
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))) ==
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))),
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)))) ==
                                        Implies(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        rewrite(Implies(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50)))) ==
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))))),
                                  rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(And(Var(0) >=
                                        50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                                  Implies(Var(0) >= 0,
                                        Implies(And(Var(0) >=
                                        50,
                                        Var(0) < _C),
                                        And(Var(0) < 90,
                                        And(Not(Var(0) < 70),
                                        Not(Var(0) < 50))))) ==
                                  Or(Not(Var(0) >= 0),
                                     Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                     And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)))),
                            (ForAll(_n1,
                                    Implies(_n1 >= 0,
                                        Implies(And(_n1 >=
                                        50,
                                        _n1 < _C),
                                        And(_n1 < 90,
                                        And(Not(_n1 < 70),
                                        Not(_n1 < 50))))))) ==
                            (ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       Not(And(_n1 >= 50,
                                        Not(_C <= _n1))),
                                       And(Not(90 <= _n1),
                                        70 <= _n1,
                                        50 <= _n1))))),
                ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          Not(And(_n1 >= 50, Not(_C <= _n1))),
                          And(Not(90 <= _n1),
                              70 <= _n1,
                              50 <= _n1)))),
             quant-intro(monotonicity(monotonicity(monotonicity(monotonicity(rewrite((_C <=
                                        Var(0)) ==
                                        (_C + -1*Var(0) <= 0)),
                                        Not(_C <= Var(0)) ==
                                        Not(_C + -1*Var(0) <=
                                        0)),
                                        And(Var(0) >= 50,
                                        Not(_C <= Var(0))) ==
                                        And(Var(0) >= 50,
                                        Not(_C + -1*Var(0) <=
                                        0))),
                                        Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))) ==
                                        Not(And(Var(0) >= 50,
                                        Not(_C + -1*Var(0) <=
                                        0)))),
                                      monotonicity(monotonicity(rewrite((90 <=
                                        Var(0)) ==
                                        (Var(0) >= 90)),
                                        Not(90 <= Var(0)) ==
                                        Not(Var(0) >= 90)),
                                        rewrite((70 <=
                                        Var(0)) ==
                                        (Var(0) >= 70)),
                                        rewrite((50 <=
                                        Var(0)) ==
                                        (Var(0) >= 50)),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0)) ==
                                        And(Not(Var(0) >= 90),
                                        Var(0) >= 70,
                                        Var(0) >= 50)),
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 50,
                                        Not(_C <= Var(0)))),
                                        And(Not(90 <= Var(0)),
                                        70 <= Var(0),
                                        50 <= Var(0))) ==
                                      Or(Not(Var(0) >= 0),
                                        Not(And(Var(0) >= 50,
..., unit-resolution(th-lemma(Or(Not(_C <= 50), _C <= 70)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 90,
                                        Not(70 >= 70),
                                        Not(70 >= 50)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((70 >=
                                        0) ==
                                        True),
                                        Not(70 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 0) ==
                                        False),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(-1*
                                        70 ==
                                        -70),
                                        _C + -1*70 ==
                                        _C + -70),
                                        rewrite(_C + -70 ==
                                        -70 + _C),
                                        _C + -1*70 ==
                                        -70 + _C),
                                        (_C + -1*70 <= 0) ==
                                        (-70 + _C <= 0)),
                                        rewrite((-70 + _C <=
                                        0) ==
                                        (_C <= 70)),
                                        (_C + -1*70 <= 0) ==
                                        (_C <= 70)),
                                        Not(_C + -1*70 <= 0) ==
                                        Not(_C <= 70)),
                                        rewrite((70 >= 90) ==
                                        False),
                                        trans(monotonicity(rewrite((70 >=
                                        70) ==
                                        True),
                                        Not(70 >= 70) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 70) ==
                                        False),
                                        trans(monotonicity(rewrite((70 >=
                                        50) ==
                                        True),
                                        Not(70 >= 50) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(70 >= 50) ==
                                        False),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 90,
                                        Not(70 >= 70),
                                        Not(70 >= 50)) ==
                                        Or(False,
                                        Not(_C <= 70),
                                        False,
                                        False,
                                        False)),
                                        rewrite(Or(False,
                                        Not(_C <= 70),
                                        False,
                                        False,
                                        False) ==
                                        Not(_C <= 70)),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 90,
                                        Not(70 >= 70),
                                        Not(70 >= 50)) ==
                                        Not(_C <= 70)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 90,
                                        Not(70 >= 70),
                                        Not(70 >= 50))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Or(Not(70 >= 0),
                                        Not(_C + -1*70 <= 0),
                                        70 >= 90,
                                        Not(70 >= 70),
                                        Not(70 >= 50))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                        Not(_C <= 70))),
                                   Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        Not(_C + -1*_n1 <= 0),
                                        _n1 >= 90,
                                        Not(_n1 >= 70),
                                        Not(_n1 >= 50)))),
                                      Not(_C <= 70))),
                                mp(mp~(mp(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(_C <= _n1,
                                        Or(_n1 >= 90,
                                        Or(Not(_n1 >= 70),
                                        Not(_n1 >= 50))))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(Or(Var(0) >=
                                        90,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 90,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))) ==
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))),
                                        rewrite(Implies(_C <=
                                        Var(0),
                                        Or(Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 90,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))) ==
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 90,
                                        Or(Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(_C <= Var(0)),
                                        Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(_C <= Var(0)),
                                        Var(0) >= 90,
                                        Not(Var(0) >= 70),
                                        Not(Var(0) >= 50))),
                                        Implies(Var(0) >= 0,
                                        Implies(_C <= Var(0),
                                        Or(Var(0) >= 90,
..., False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 90,And(Not(_n1 < 70),Not(_n1 < 50))))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 90,And(Not(_n1 < 70),Not(_n1 < 50))))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 51, _n1!0 = 50, _f = [else -> Var(0)]]


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 70,Not(_n1 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 70,Not(_n1 >= 50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 70, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(70)),Not(((50)<(50))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 < 70,Not(_n1 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 70,Not(_n1 >= 50))))))
	_s.add(Not(And(((50)<(70)),Not(((50)<(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, Not(False)))), trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                      And(True, Not(False)) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True, Not(False)) == True),
                   Not(And(True, Not(False))) == Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, Not(False))) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(70 <= _n1,_n1 < _C),And(_n1 < 90,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 90,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 90, _f = [else -> Var(0)]]


System try to prove 
And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(70 <= _n1,_n1 < _C),And(_n1 < 90,And(Not(_n1 < 70),Not(_n1 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 >= 90,Or(Not(_n1 >= 70),Not(_n1 >= 50)))))))
	_s.add(Not(And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, And(Not(False), Not(False))))), trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                        rewrite(Not(False) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        And(True, True)),
                                        rewrite(And(True,
                                        True) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        True),
                                      And(True,
                                        And(Not(False),
                                        Not(False))) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True,
                             And(Not(False), Not(False))) ==
                         True),
                   Not(And(True,
                           And(Not(False), Not(False)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, And(Not(False), Not(False)))) == False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 90

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 90))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 90)),
      trans(monotonicity(rewrite((x8(0) < 90) ==
                                 Not(90 <= x8(0))),
                         Not(x8(0) < 90) ==
                         Not(Not(90 <= x8(0)))),
            rewrite(Not(Not(90 <= x8(0))) == (90 <= x8(0))),
            Not(x8(0) < 90) == (90 <= x8(0))),
      90 <= x8(0)),
   rewrite((90 <= x8(0)) == (x8(0) >= 90)),
   x8(0) >= 90), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 90) == (0 >= 90)),
      rewrite((0 >= 90) == False),
      (x8(0) >= 90) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 50

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 50))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 50)),
      trans(monotonicity(rewrite((x8(0) < 50) ==
                                 Not(50 <= x8(0))),
                         Not(x8(0) < 50) ==
                         Not(Not(50 <= x8(0)))),
            rewrite(Not(Not(50 <= x8(0))) == (50 <= x8(0))),
            Not(x8(0) < 50) == (50 <= x8(0))),
      50 <= x8(0)),
   rewrite((50 <= x8(0)) == (x8(0) >= 50)),
   x8(0) >= 50), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 50) == (0 >= 50)),
      rewrite((0 >= 50) == False),
      (x8(0) >= 50) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 70

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 70))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 70)),
      trans(monotonicity(rewrite((x8(0) < 70) ==
                                 Not(70 <= x8(0))),
                         Not(x8(0) < 70) ==
                         Not(Not(70 <= x8(0)))),
            rewrite(Not(Not(70 <= x8(0))) == (70 <= x8(0))),
            Not(x8(0) < 70) == (70 <= x8(0))),
      70 <= x8(0)),
   rewrite((70 <= x8(0)) == (x8(0) >= 70)),
   x8(0) >= 70), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 70) == (0 >= 70)),
      rewrite((0 >= 70) == False),
      (x8(0) >= 70) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 90,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        90) ==
                                        Not(90 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(90 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(90 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 90,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            x8(_n1) - 3 >= x8(_n1) - 3)))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        (-3 + x8(Var(0)) >=
                                        -3 + x8(Var(0)))),
                                        rewrite((-3 +
                                        x8(Var(0)) >=
                                        -3 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      x8(_n1) - 3 >=
                                      x8(_n1) - 3))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         x8(_n1) - 3 >= x8(_n1) - 3))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 50,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        50) ==
                                        Not(50 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(50 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(50 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 50,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 70,
                                    x8(_n1) + 2 >=
                                    x8(_n1) + 2))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        70) ==
                                        Not(70 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        (2 + x8(Var(0)) >=
                                        2 + x8(Var(0)))),
                                        rewrite((2 +
                                        x8(Var(0)) >=
                                        2 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        Implies(Not(70 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(70 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 70,
                                 x8(_n1) + 2 >= x8(_n1) + 2)))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV1
 Closed Form Solution
_CV1 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV3
 Closed Form Solution
_CV3 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV4

Closed form solution return by sympy 
_CV4 + 2*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 2,x8(0)=_CV4
 Closed Form Solution
_CV4 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) - 3)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 - 3*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) - 3,x8(0)=_CV2
 Closed Form Solution
_CV2 - 3*_n1

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 50, _f = [else -> Var(0)]]


System try to prove 
((((0)+(0)))<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))
	_s.add(Not(((((0)+(0)))<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))
	_s.add(Not(And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 10, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(70)),Not(((50)<(50))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))
	_s.add(Not(And(((50)<(70)),Not(((50)<(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, Not(False)))), trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                      And(True, Not(False)) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True, Not(False)) == True),
                   Not(And(True, Not(False))) == Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, Not(False))) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 20, _f = [else -> Var(0)]]


System try to prove 
And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))
	_s.add(Not(And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, And(Not(False), Not(False))))), trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                        rewrite(Not(False) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        And(True, True)),
                                        rewrite(And(True,
                                        True) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        True),
                                      And(True,
                                        And(Not(False),
                                        Not(False))) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True,
                             And(Not(False), Not(False))) ==
                         True),
                   Not(And(True,
                           And(Not(False), Not(False)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, And(Not(False), Not(False)))) == False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 90))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 90

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 90))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 90)),
      trans(monotonicity(rewrite((x8(0) < 90) ==
                                 Not(90 <= x8(0))),
                         Not(x8(0) < 90) ==
                         Not(Not(90 <= x8(0)))),
            rewrite(Not(Not(90 <= x8(0))) == (90 <= x8(0))),
            Not(x8(0) < 90) == (90 <= x8(0))),
      90 <= x8(0)),
   rewrite((90 <= x8(0)) == (x8(0) >= 90)),
   x8(0) >= 90), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 90) == (0 >= 90)),
      rewrite((0 >= 90) == False),
      (x8(0) >= 90) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 90),x8(_k1 + 1) < 90)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 50

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 50))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 50)),
      trans(monotonicity(rewrite((x8(0) < 50) ==
                                 Not(50 <= x8(0))),
                         Not(x8(0) < 50) ==
                         Not(Not(50 <= x8(0)))),
            rewrite(Not(Not(50 <= x8(0))) == (50 <= x8(0))),
            Not(x8(0) < 50) == (50 <= x8(0))),
      50 <= x8(0)),
   rewrite((50 <= x8(0)) == (x8(0) >= 50)),
   x8(0) >= 50), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 50) == (0 >= 50)),
      rewrite((0 >= 50) == False),
      (x8(0) >= 50) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 50),x8(_k1 + 1) < 50)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) < 70))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
x8(0) < 70

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(x8(0) < 70))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[mp(mp(asserted(Not(x8(0) < 70)),
      trans(monotonicity(rewrite((x8(0) < 70) ==
                                 Not(70 <= x8(0))),
                         Not(x8(0) < 70) ==
                         Not(Not(70 <= x8(0)))),
            rewrite(Not(Not(70 <= x8(0))) == (70 <= x8(0))),
            Not(x8(0) < 70) == (70 <= x8(0))),
      70 <= x8(0)),
   rewrite((70 <= x8(0)) == (x8(0) >= 70)),
   x8(0) >= 70), trans(monotonicity(asserted(x8(0) == 0),
                   (x8(0) >= 70) == (0 >= 70)),
      rewrite((0 >= 70) == False),
      (x8(0) >= 70) == False), False]

Result 
Successfully Proved


System try to prove 
Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(Implies(And(_k1 >= 0,x8(_k1) < 70),x8(_k1 + 1) < 70)))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Failed To Prove


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 90,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 90,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        90) ==
                                        Not(90 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(90 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(90 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        90,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 90,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 90,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,x8(_n1) - 3 >= x8(_n1) - 3))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            x8(_n1) - 3 >= x8(_n1) - 3)))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        trans(rewrite(x8(Var(0)) -
                                        3 ==
                                        x8(Var(0)) + -1*3),
                                        trans(monotonicity(rewrite(-1*
                                        3 ==
                                        -3),
                                        x8(Var(0)) + -1*3 ==
                                        x8(Var(0)) + -3),
                                        rewrite(x8(Var(0)) +
                                        -3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) + -1*3 ==
                                        -3 + x8(Var(0))),
                                        x8(Var(0)) - 3 ==
                                        -3 + x8(Var(0))),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        (-3 + x8(Var(0)) >=
                                        -3 + x8(Var(0)))),
                                        rewrite((-3 +
                                        x8(Var(0)) >=
                                        -3 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        x8(Var(0)) - 3 >=
                                        x8(Var(0)) - 3) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        x8(_n1) - 3 >=
                                        x8(_n1) - 3))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      x8(_n1) - 3 >=
                                      x8(_n1) - 3))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         x8(_n1) - 3 >= x8(_n1) - 3))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 50,x8(_n1) + 1 >= x8(_n1) + 1)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 50,
                                    x8(_n1) + 1 >=
                                    x8(_n1) + 1))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        50) ==
                                        Not(50 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        1 ==
                                        1 + x8(Var(0))),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        (1 + x8(Var(0)) >=
                                        1 + x8(Var(0)))),
                                        rewrite((1 +
                                        x8(Var(0)) >=
                                        1 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        Implies(Not(50 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(50 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        50,
                                        x8(Var(0)) + 1 >=
                                        x8(Var(0)) + 1)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 50,
                                        x8(_n1) + 1 >=
                                        x8(_n1) + 1)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 50,
                                 x8(_n1) + 1 >= x8(_n1) + 1)))) ==
      False), False]

Result 
Successfully Proved


System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	x8=Function('x8',IntSort(),IntSort())
	_n1=Int('_n1')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",50000)
	_s.add(x8(0) == 0)
	_s.add(ForAll([_n1],Implies(_n1>=0,x8(_n1 + 1) == If(x8(_n1) < 50,x8(_n1) + 1,If(x8(_n1) < 70,x8(_n1) + 2,If(x8(_n1) < 90,x8(_n1) + 1,x8(_n1) - 3))))))
	_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies(x8(_n1) < 70,x8(_n1) + 2 >= x8(_n1) + 2)))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(ForAll(_n1,
                    Implies(_n1 >= 0,
                            Implies(x8(_n1) < 70,
                                    x8(_n1) + 2 >=
                                    x8(_n1) + 2))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(rewrite((x8(Var(0)) <
                                        70) ==
                                        Not(70 <= x8(Var(0)))),
                                        trans(monotonicity(rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        rewrite(x8(Var(0)) +
                                        2 ==
                                        2 + x8(Var(0))),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        (2 + x8(Var(0)) >=
                                        2 + x8(Var(0)))),
                                        rewrite((2 +
                                        x8(Var(0)) >=
                                        2 + x8(Var(0))) ==
                                        True),
                                        (x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        Implies(Not(70 <=
                                        x8(Var(0))),
                                        True)),
                                        rewrite(Implies(Not(70 <=
                                        x8(Var(0))),
                                        True) ==
                                        True),
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        Implies(Var(0) >= 0,
                                        True)),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        True) ==
                                        True),
                                        Implies(Var(0) >= 0,
                                        Implies(x8(Var(0)) <
                                        70,
                                        x8(Var(0)) + 2 >=
                                        x8(Var(0)) + 2)) ==
                                        True),
                                     (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                                     (ForAll(_n1, True))),
                         elim-unused((ForAll(_n1, True)) ==
                                     True),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                         True),
                   Not(ForAll(_n1,
                              Implies(_n1 >= 0,
                                      Implies(x8(_n1) < 70,
                                        x8(_n1) + 2 >=
                                        x8(_n1) + 2)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll(_n1,
                 Implies(_n1 >= 0,
                         Implies(x8(_n1) < 70,
                                 x8(_n1) + 2 >= x8(_n1) + 2)))) ==
      False), False]

Result 
Successfully Proved


Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV1

Closed form solution return by sympy 
_CV1 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV1
 Closed Form Solution
_CV1 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=_CV3

Closed form solution return by sympy 
_CV3 + n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 1,x8(0)=_CV3
 Closed Form Solution
_CV3 + _n1

Equation Pass to sympy
T(n+1)-(T(n) + 2)=0------Base Case--T(0)=_CV4

Closed form solution return by sympy 
_CV4 + 2*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) + 2,x8(0)=_CV4
 Closed Form Solution
_CV4 + 2*_n1

Equation Pass to sympy
T(n+1)-(T(n) - 3)=0------Base Case--T(0)=_CV2

Closed form solution return by sympy 
_CV2 - 3*n

Original Axoims 
x8(_n1 + 1)=x8(_n1) - 3,x8(0)=_CV2
 Closed Form Solution
_CV2 - 3*_n1

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 50, _f = [else -> Var(0)]]


System try to prove 
((((0)+(0)))<(50))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(0 <= _n1,_n1 < _C),_n1 < 50))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,_n1 >= 50))))
	_s.add(Not(((((0)+(0)))<(50))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(True)), rewrite(Not(True) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(_n1 + 50 < 90,And(Not(_n1 + 50 < 70),Not(_n1 + 50 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 50 >= 90,Or(Not(_n1 + 50 >= 70),Not(_n1 + 50 >= 50)))))))
	_s.add(Not(And(((50)<(90)),And(Not(((50)<(70))),Not(((50)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 40, _f = [else -> Var(0)]]


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 10, _f = [else -> Var(0)]]


System try to prove 
And(((50)<(70)),Not(((50)<(50))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(50 <= _n1,_n1 < _C),And(2*_n1 + 50 < 70,Not(2*_n1 + 50 < 50))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(2*_n1 + 50 >= 70,Not(2*_n1 + 50 >= 50))))))
	_s.add(Not(And(((50)<(70)),Not(((50)<(50))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, Not(False)))), trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                      And(True, Not(False)) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True, Not(False)) == True),
                   Not(And(True, Not(False))) == Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, Not(False))) == False), False]

Result 
Successfully Proved


Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


Result 
Counter Example
[_C = 20, _f = [else -> Var(0)]]


System try to prove 
And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))

Query to z3 
import sys
import os
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/setuptools/")
currentdirectory = os.path.dirname(os.path.realpath(__file__))
sys.path.append(currentdirectory+"/packages/z3/python/")
from z3 import *
init(currentdirectory+"/packages/z3")
set_param(proof=True)

try:
	_p1=Int('_p1')
	_p2=Int('_p2')
	_n=Int('_n')
	_bool=Int('_bool')
	arraySort = DeclareSort('arraySort')
	_f=Function('_f',IntSort(),IntSort())
	_ToReal=Function('_ToReal',RealSort(),IntSort())
	_ToInt=Function('_ToInt',IntSort(),RealSort())
	_k1=Int('_k1')
	_n1=Int('_n1')
	_C=Int('_C')
	_s=Solver()
	_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
	_s.set("timeout",1000)
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(And(60 <= _n1,_n1 < _C),And(_n1 + 70 < 90,And(Not(_n1 + 70 < 70),Not(_n1 + 70 < 50)))))))
	_s.add(ForAll([_n1],Implies(_n1>=0,Implies(_C <= _n1,Or(_n1 + 70 >= 90,Or(Not(_n1 + 70 >= 70),Not(_n1 + 70 >= 50)))))))
	_s.add(Not(And(((70)<(90)),And(Not(((70)<(70))),Not(((70)<(50)))))))

except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()

	sys.exit(1)

try:
	result=_s.check()
	if sat==result:
		print "Counter Example"
		print _s.model()
	elif unsat==result:
		result
		try:
			if os.path.isfile('j2llogs.logs'):
				file = open('j2llogs.logs', 'a')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
			else:
				file = open('j2llogs.logs', 'w')
				file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
				file.close()
		except Exception as e:
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
			file.close()
		print "Successfully Proved"
	else:
		print "Failed To Prove"
except Exception as e:
	print "Error(Z3Query)"
	file = open('j2llogs.logs', 'a')

	file.write(str(e))

	file.close()


**************
Proof Details
**************
[asserted(Not(And(True, And(Not(False), Not(False))))), trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(Not(False) ==
                                        True),
                                        rewrite(Not(False) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        And(True, True)),
                                        rewrite(And(True,
                                        True) ==
                                        True),
                                        And(Not(False),
                                        Not(False)) ==
                                        True),
                                      And(True,
                                        And(Not(False),
                                        Not(False))) ==
                                      And(True, True)),
                         rewrite(And(True, True) == True),
                         And(True,
                             And(Not(False), Not(False))) ==
                         True),
                   Not(And(True,
                           And(Not(False), Not(False)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(And(True, And(Not(False), Not(False)))) == False), False]

Result 
Successfully Proved

